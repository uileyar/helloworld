<!DOCTYPE html>
<!-- saved from url=(0051)https://golang-china.appspot.com/pkg/runtime/pprof/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<!--
  <title>pprof - The Go Programming Language</title>
-->
  <title>pprof - Go 编程语言</title>

<link type="text/css" rel="stylesheet" href="./pprof - Go 编程语言_files/style.css">

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="https://golang-china.appspot.com/opensearch.xml">

<link rel="stylesheet" href="https://golang-china.appspot.com/lib/godoc/jquery.treeview.css">
<script type="text/javascript">window.initFuncs = [];</script>
</head>
<body>

<div id="lowframe" style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="https://golang-china.appspot.com/search" id="1256735744">
<div id="menu" style="min-width: 650px;">
<!--
<a href="/doc/">Documents</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>
<a href="/blog/">Blog</a>
-->
<a href="https://golang-china.appspot.com/doc/">文档</a>
<a href="https://golang-china.appspot.com/pkg/">包</a>
<a href="https://golang-china.appspot.com/project/">项目</a>
<a href="https://golang-china.appspot.com/help/">帮助</a>
<a href="https://golang-china.appspot.com/blog/">博客</a>

<!--
<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>
-->
<a id="playgroundButton" href="http://play.golang.org/" title="显示 Go 操场" style="display: inline;">运行</a>

<!--
<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
-->
<input type="text" id="search" name="q" class="inactive" value="搜索" placeholder="搜索">
</div>
<!--
<div id="heading"><a href="/">The Go Programming Language</a></div>
-->
<div id="heading"><a href="https://golang-china.appspot.com/">Go 编程语言</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
<!--
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
-->
		<a class="run" title="运行此代码[Shift-Enter]">运行</a>
		<a class="fmt" title="格式化此代码">格式化</a>
		<a class="share" title="分享此代码">分享</a>
	</div>
</div>


<div id="page" class="wide" tabindex="-1" style="outline: 0px;">
<div class="container">


<div class="lang-switch-button-group" role="group">
  <button type="button" class="btn btn-default" onclick="$(&quot;div.english&quot;).css(&quot;display&quot;, &quot;block&quot;);$(&quot;div.chinese&quot;).css(&quot;display&quot;, &quot;none&quot;);console.log(&quot;lang-en&quot;);">英文</button>
  <button type="button" class="btn btn-default" onclick="$(&quot;div.english&quot;).css(&quot;display&quot;,&quot;block&quot;);$(&quot;div.chinese&quot;).css(&quot;display&quot;,&quot;block&quot;);console.log(&quot;lang-en-zh&quot;);">对照</button>
  <button type="button" class="btn btn-default" onclick="$(&quot;div.english&quot;).css(&quot;display&quot;,&quot;none&quot;);$(&quot;div.chinese&quot;).css(&quot;display&quot;,&quot;block&quot;);console.log(&quot;lang-zh&quot;);">中文</button>
</div>



  <h1>Package pprof</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	<script type="text/javascript">
	document.ANALYSIS_DATA = null;
	document.CALLGRAPH = null;
	</script>

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "runtime/pprof"</code></dd>
			</dl>
			<dl>
<!--
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
-->
			<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#pkg-overview" class="overviewLink">概览</a></dd>
			<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#pkg-index" class="indexLink">索引</a></dd>
			
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
<!--
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
-->
				<h2 class="toggleButton" title="点此显示概览">概览 ▹</h2>
			</div>
			<div class="expanded">
<!--
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
-->
				<h2 class="toggleButton" title="点此隐藏概览">概览 ▾</h2>
				<p>
pprof 包按照可视化工具 pprof
所要求的格式写出运行时分析数据. 更多有关 pprof 的信息见 <a href="http://code.google.com/p/google-perftools/">http://code.google.com/p/google-perftools/</a>。
</p>

			</div>
		</div>
		

		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
<!--
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
-->
			<h2 class="toggleButton" title="点此显示素引">索引 ▹</h2>
		</div>
		<div class="expanded">
<!--
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>
-->
			<h2 class="toggleButton" title="点此隐藏索引">索引 ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profiles">func Profiles() []*Profile</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#StartCPUProfile">func StartCPUProfile(w io.Writer) error</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#StartTrace">func StartTrace(w io.Writer) error</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#StopCPUProfile">func StopCPUProfile()</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#StopTrace">func StopTrace()</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#WriteHeapProfile">func WriteHeapProfile(w io.Writer) error</a></dd>
			
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">type Profile</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Lookup">func Lookup(name string) *Profile</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/runtime/pprof/#NewProfile">func NewProfile(name string) *Profile</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile.Add">func (p *Profile) Add(value interface{}, skip int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile.Count">func (p *Profile) Count() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile.Name">func (p *Profile) Name() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile.Remove">func (p *Profile) Remove(value interface{})</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile.WriteTo">func (p *Profile) WriteTo(w io.Writer, debug int) error</a></dd>
				
			
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/runtime/pprof/#pkg-note-BUG">Bugs</a></dd>
				
			
			</dl>
			</div><!-- #manual-nav -->

		

		
<!--
			<h4>Package files</h4>
-->
			<h4>包文件</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go">pprof.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		<div id="pkg-callgraph" class="toggle" style="display: none">
		<div class="collapsed">
<!--
			<h2 class="toggleButton" title="Click to show Internal Call Graph section">Internal call graph ▹</h2>
-->
			<h2 class="toggleButton" title="点此显示内部调用图">内部调用图 ▹</h2>
		</div> <!-- .expanded -->
		<div class="expanded">
<!--
			<h2 class="toggleButton" title="Click to hide Internal Call Graph section">Internal call graph ▾</h2>
-->
			<h2 class="toggleButton" title="点此隐藏内部调用图">内部调用图 ▾</h2>
<!--
			<p>
			  In the call graph viewer below, each node
			  is a function belonging to this package
			  and its children are the functions it
			  calls&mdash;perhaps dynamically.
			</p>
			<p>
			  The root nodes are the entry points of the
			  package: functions that may be called from
			  outside the package.
			  There may be non-exported or anonymous
			  functions among them if they are called
			  dynamically from another package.
			</p>
			<p>
			  Click a node to visit that function's source code.
			  From there you can visit its callers by
			  clicking its declaring <code>func</code>
			  token.
			</p>
			<p>
			  Functions may be omitted if they were
			  determined to be unreachable in the
			  particular programs or tests that were
			  analyzed.
			</p>
-->
			<p>
			在下面的调用图查看器中，每个节点都是一个属于本包的函数，其子节点即为它所调用的函数——或许是动态的。
			</p>
			<p>
			根节点为包的入口点：函数可从包的外部调用。若这些函数被其它包动态地调用，
			那么它们可能是未导出的或匿名的。
			</p>
			<p>
			点击一个节点来查看该函数的源码。在源码中，可以点击它的 <code>func</code>
			声明标记来查看其调用者。
			</p>
			<p>
			在分析特定程序或测试时，被认定为无法访问的函数会被忽略。
			</p>
			<!-- Zero means show all package entry points. -->
			<ul style="margin-left: 0.5in" id="callgraph-0" class="treeview"></ul>
		</div>
		</div> <!-- #pkg-callgraph -->

		
		
		
			
			
			<h2 id="Profiles">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=3437:3463#L122">Profiles</a></h2>
			<pre>func Profiles() []*<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a></pre>
			<p>
Profiles
返回所有已知分析的切片，按名称排序。
</p>

			
			

		
			
			
			<h2 id="StartCPUProfile">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=16062:16101#L553">StartCPUProfile</a></h2>
			<pre>func StartCPUProfile(w <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#Writer">Writer</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a></pre>
			<p>
StartCPUProfile 为当前进程开启CPU分析。
在分析时，分析报告会缓存并写入到 w 中。若分析已经开启，StartCPUProfile 就会返回错误。
</p>

			
			

		
			
			
			<h2 id="StartTrace">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=17632:17666#L611">StartTrace</a></h2>
			<pre>func StartTrace(w <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#Writer">Writer</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a></pre>
			<p>
TODO(rsc): Decide if StartTrace belongs in this package.
See golang.org/issue/9710.
StartTrace enables tracing for the current process.
While tracing, the trace will be buffered and written to w.
StartTrace returns an error if profiling is tracing enabled.
</p>

			
			

		
			
			
			<h2 id="StopCPUProfile">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=17202:17223#L594">StopCPUProfile</a></h2>
			<pre>func StopCPUProfile()</pre>
			<p>
StopCPUProfile 会停止当前的CPU分析，如果有的话。 StopCPUProfile
只会在所有的分析报告写入完毕后才会返回。
</p>

			
			

		
			
			
			<h2 id="StopTrace">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=17984:18000#L629">StopTrace</a></h2>
			<pre>func StopTrace()</pre>
			<p>
StopTrace stops the current tracing, if any.
StopTrace only returns after all the writes for the trace have completed.
</p>

			
			

		
			
			
			<h2 id="WriteHeapProfile">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=10132:10172#L359">WriteHeapProfile</a></h2>
			<pre>func WriteHeapProfile(w <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#Writer">Writer</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a></pre>
			<p>
WriteHeapProfile 是 Lookup("heap").WriteTo(w, 0) 的简写。
它是为了保持向后兼容性而存在的。
</p>

			
			

		
		
			
			
			<h2 id="Profile">type <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=1627:1767#L38">Profile</a></h2>
			<pre>type Profile struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Profile
是一个栈跟踪的集合，它显示了引导特定事件实例的调用序列，例如分配。
包可以创建并维护它们自己的分析，它一般用于跟踪必须被显式关闭的资源，例如文件或网络连接。
</p>
<p>
一个 Profile 的方法可被多个Go程同时调用。
</p>
<p>
每个 Profile 都有唯一的名称。有些 Profile 是预定义的：
</p>
<pre>goroutine    - 所有当前Go程的栈跟踪
heap         - 所有堆分配的采样
threadcreate - 引导新OS的线程创建的栈跟踪
block        - 引导同步原语中阻塞的栈跟踪
</pre>
<p>
这些预声明分析并不能作为 Profile 使用。它有专门的API，即 StartCPUProfile 和 StopCPUProfile
函数，因为它在分析时是以流的形式输出到写入器的。
</p>


			

			

			
			
			

			
				
				<h3 id="Lookup">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=3262:3295#L115">Lookup</a></h3>
				<pre>func Lookup(name <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) *<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a></pre>
				<p>
Lookup
返回给定名称的分析，若不存在该分析，则返回 nil。
</p>

				
				
			
				
				<h3 id="NewProfile">func <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=2836:2873#L97">NewProfile</a></h3>
				<pre>func NewProfile(name <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) *<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a></pre>
				<p>
NewProfile 以给定的名称创建一个新的分析。
若拥有该名称的分析已存在，NewProfile 就会引起恐慌。 约定使用一个 'import/path'
导入路径前缀来为每个包创建单独的命名空间。
</p>

				
				
			

			
				
				<h3 id="Profile.Add">func (*Profile) <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=4981:5031#L174">Add</a></h3>
				<pre>func (p *<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a>) Add(value interface{}, skip <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>)</pre>
				<p>
Add
将当前与值相关联的执行栈添加到该分析中。 Add
在一个内部映射中存储值，因此值必须适于用作映射键，且在对应的 Remove
调用之前不会被垃圾收集。若分析已经包含了值的栈，Add 就会引发恐慌。
</p>
<p>
skip 形参与 runtime.Caller 的 skip
意思相同，它用于控制栈跟踪从哪里开始。 传入 skip=0 会从函数调用 Add
处开始跟踪。例如，给定以下执行栈：
</p>
<pre>Add
调用自 rpc.NewClient
调用自 mypkg.Run
调用自 main.main
</pre>
<p>
传入 skip=0 会从 rpc.NewClient 中的 Add 调用处开始栈跟踪。 传入 skip=1 会从 mypkg.Run 中的 NewClient
调用处开始栈跟踪。
</p>

				
				
				
			
				
				<h3 id="Profile.Count">func (*Profile) <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=4055:4084#L147">Count</a></h3>
				<pre>func (p *<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a>) Count() <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
Count 返回该分析中当前执行栈的数量。
</p>

				
				
				
			
				
				<h3 id="Profile.Name">func (*Profile) <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=3929:3960#L142">Name</a></h3>
				<pre>func (p *<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a>) Name() <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
Name 返回该分析的名称，它可被传入 Lookup 来重新获取该分析。
</p>

				
				
				
			
				
				<h3 id="Profile.Remove">func (*Profile) <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=5520:5563#L195">Remove</a></h3>
				<pre>func (p *<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a>) Remove(value interface{})</pre>
				<p>
Remove 从该分析中移除与值 value 相关联的执行栈。 若值 value
不在此分析中，则为空操作。
</p>

				
				
				
			
				
				<h3 id="Profile.WriteTo">func (*Profile) <a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=6325:6380#L214">WriteTo</a></h3>
				<pre>func (p *<a href="https://golang-china.appspot.com/pkg/runtime/pprof/#Profile">Profile</a>) WriteTo(w <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#Writer">Writer</a>, debug <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a></pre>
				<p>
WriteTo 将pprof格式的分析快照写入 w 中。 若一个向 w
的写入返回一个错误，WriteTo 就会返回该错误。 否则，WriteTo 就会返回 nil。
</p>
<p>
debug 形参用于开启附加的输出。 传入 debug=0
只会打印pprof所需要的十六进制地址。 传入 debug=1
会将地址翻译为函数名和行号并添加注释，以便让程序员无需工具阅读分析报告。
</p>
<p>
预声明分析报告可为其它 debug
值赋予含义；例如，当打印“Go程”的分析报告时， debug=2
意为：由于不可恢复的恐慌而濒临崩溃时，使用与Go程序相同的形式打印Go程的栈信息。
</p>

				
				
				
			
		
	

	
		
			<h2 id="pkg-note-BUG">Bugs</h2>
			<ul style="list-style: none; padding: 0;">
			
			<li><a href="https://golang-china.appspot.com/src/runtime/pprof/pprof.go?s=469:589#L13">☞</a> Profiles are incomplete and inaccurate on NetBSD and OS X.
See http://golang.org/issue/6047 for details.
</li>
			
			</ul>
		
	







<!--
<div id="footer">
Build version go1.4.2 (appengine-1.9.21).<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> |
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>
-->
<div id="footer">
构建版本 go1.4.2 (appengine-1.9.21).<br>
除<a href="https://developers.google.com/site-policies#restrictions">特别注明</a>外，
本页内容均采用知识共享-署名（CC-BY）3.0协议授权，代码采用<a href="https://golang-china.appspot.com/LICENSE">BSD协议</a>授权。<br>
<a href="https://golang-china.appspot.com/doc/tos.html">服务条款</a> |
<a href="http://www.google.com/intl/en/policies/privacy/">隐私政策</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<!-- TODO(adonovan): load these from <head> using "defer" attribute? -->
<script type="text/javascript" src="./pprof - Go 编程语言_files/jquery.js"></script>
<script type="text/javascript" src="./pprof - Go 编程语言_files/jquery.treeview.js"></script>
<script type="text/javascript" src="./pprof - Go 编程语言_files/jquery.treeview.edit.js"></script>


<script type="text/javascript" src="./pprof - Go 编程语言_files/playground.js"></script>

<script type="text/javascript" src="./pprof - Go 编程语言_files/godocs.js"></script>



</body></html>