<!DOCTYPE html>
<!-- saved from url=(0044)https://golang-china.appspot.com/pkg/regexp/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">


<!--
  <title>regexp - The Go Programming Language</title>
-->
  <title>regexp - Go 编程语言</title>

<link type="text/css" rel="stylesheet" href="./regexp - Go 编程语言_files/style.css">

<link rel="search" type="application/opensearchdescription+xml" title="godoc" href="https://golang-china.appspot.com/opensearch.xml">

<link rel="stylesheet" href="https://golang-china.appspot.com/lib/godoc/jquery.treeview.css">
<script type="text/javascript">window.initFuncs = [];</script>
</head>
<body>

<div id="lowframe" style="position: fixed; bottom: 0; left: 0; height: 0; width: 100%; border-top: thin solid grey; background-color: white; overflow: auto;">
...
</div><!-- #lowframe -->

<div id="topbar" class="wide"><div class="container">

<form method="GET" action="https://golang-china.appspot.com/search" id="1051805472">
<div id="menu" style="min-width: 650px;">
<!--
<a href="/doc/">Documents</a>
<a href="/pkg/">Packages</a>
<a href="/project/">The Project</a>
<a href="/help/">Help</a>
<a href="/blog/">Blog</a>
-->
<a href="https://golang-china.appspot.com/doc/">文档</a>
<a href="https://golang-china.appspot.com/pkg/">包</a>
<a href="https://golang-china.appspot.com/project/">项目</a>
<a href="https://golang-china.appspot.com/help/">帮助</a>
<a href="https://golang-china.appspot.com/blog/">博客</a>

<!--
<a id="playgroundButton" href="http://play.golang.org/" title="Show Go Playground">Play</a>
-->
<a id="playgroundButton" href="http://play.golang.org/" title="显示 Go 操场" style="display: inline;">运行</a>

<!--
<input type="text" id="search" name="q" class="inactive" value="Search" placeholder="Search">
-->
<input type="text" id="search" name="q" class="inactive" value="搜索" placeholder="搜索">
</div>
<!--
<div id="heading"><a href="/">The Go Programming Language</a></div>
-->
<div id="heading"><a href="https://golang-china.appspot.com/">Go 编程语言</a></div>
</form>

</div></div>


<div id="playground" class="play">
	<div class="input"><textarea class="code">package main

import "fmt"

func main() {
	fmt.Println("Hello, 世界")
}</textarea></div>
	<div class="output"></div>
	<div class="buttons">
<!--
		<a class="run" title="Run this code [shift-enter]">Run</a>
		<a class="fmt" title="Format this code">Format</a>
		<a class="share" title="Share this code">Share</a>
-->
		<a class="run" title="运行此代码[Shift-Enter]">运行</a>
		<a class="fmt" title="格式化此代码">格式化</a>
		<a class="share" title="分享此代码">分享</a>
	</div>
</div>


<div id="page" class="wide" tabindex="-1" style="outline: 0px;">
<div class="container">


<div class="lang-switch-button-group" role="group">
  <button type="button" class="btn btn-default" onclick="$(&quot;div.english&quot;).css(&quot;display&quot;, &quot;block&quot;);$(&quot;div.chinese&quot;).css(&quot;display&quot;, &quot;none&quot;);console.log(&quot;lang-en&quot;);">英文</button>
  <button type="button" class="btn btn-default" onclick="$(&quot;div.english&quot;).css(&quot;display&quot;,&quot;block&quot;);$(&quot;div.chinese&quot;).css(&quot;display&quot;,&quot;block&quot;);console.log(&quot;lang-en-zh&quot;);">对照</button>
  <button type="button" class="btn btn-default" onclick="$(&quot;div.english&quot;).css(&quot;display&quot;,&quot;none&quot;);$(&quot;div.chinese&quot;).css(&quot;display&quot;,&quot;block&quot;);console.log(&quot;lang-zh&quot;);">中文</button>
</div>



  <h1>Package regexp</h1>




<div id="nav"></div>


<!--
	Copyright 2009 The Go Authors. All rights reserved.
	Use of this source code is governed by a BSD-style
	license that can be found in the LICENSE file.
-->
<!--
	Note: Static (i.e., not template-generated) href and id
	attributes start with "pkg-" to make it impossible for
	them to conflict with generated attributes (some of which
	correspond to Go identifiers).
-->

	<script type="text/javascript">
	document.ANALYSIS_DATA = null;
	document.CALLGRAPH = null;
	</script>

	
		
		<div id="short-nav">
			<dl>
			<dd><code>import "regexp"</code></dd>
			</dl>
			<dl>
<!--
			<dd><a href="#pkg-overview" class="overviewLink">Overview</a></dd>
			<dd><a href="#pkg-index" class="indexLink">Index</a></dd>
-->
			<dd><a href="https://golang-china.appspot.com/pkg/regexp/#pkg-overview" class="overviewLink">概览</a></dd>
			<dd><a href="https://golang-china.appspot.com/pkg/regexp/#pkg-index" class="indexLink">索引</a></dd>
			
<!--
				<dd><a href="#pkg-examples" class="examplesLink">Examples</a></dd>
-->
				<dd><a href="https://golang-china.appspot.com/pkg/regexp/#pkg-examples" class="examplesLink">示例</a></dd>
			
			
<!--
				<dd><a href="#pkg-subdirectories">Subdirectories</a></dd>
-->
				<dd><a href="https://golang-china.appspot.com/pkg/regexp/#pkg-subdirectories">子目录</a></dd>
			
			</dl>
		</div>
		<!-- The package's Name is printed as title by the top-level template -->
		<div id="pkg-overview" class="toggleVisible">
			<div class="collapsed">
<!--
				<h2 class="toggleButton" title="Click to show Overview section">Overview ▹</h2>
-->
				<h2 class="toggleButton" title="点此显示概览">概览 ▹</h2>
			</div>
			<div class="expanded">
<!--
				<h2 class="toggleButton" title="Click to hide Overview section">Overview ▾</h2>
-->
				<h2 class="toggleButton" title="点此隐藏概览">概览 ▾</h2>
				<p>
regexp包实现了正则表达式搜索。
</p>
<p>
正则表达式采用RE2语法（除了\c、\C），和Perl、Python等语言的正则基本一致。
</p>
<p>
参见http://code.google.com/p/re2/wiki/Syntax。
</p>

			</div>
		</div>
		<div id="example_" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	// Compile the expression once, usually at init time.
	// Use raw strings to avoid having to quote the backslashes.
	var validID = regexp.MustCompile(`^[a-z]+\[[0-9]+\]$`)

	fmt.Println(validID.MatchString("adam[23]"))
	fmt.Println(validID.MatchString("eve[7]"))
	fmt.Println(validID.MatchString("Job[48]"))
	fmt.Println(validID.MatchString("snakey"))
}
</textarea></div>
				<div class="output"><pre>true
true
false
false
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>


		<div id="pkg-index" class="toggleVisible">
		<div class="collapsed">
<!--
			<h2 class="toggleButton" title="Click to show Index section">Index ▹</h2>
-->
			<h2 class="toggleButton" title="点此显示素引">索引 ▹</h2>
		</div>
		<div class="expanded">
<!--
			<h2 class="toggleButton" title="Click to hide Index section">Index ▾</h2>
-->
			<h2 class="toggleButton" title="点此隐藏索引">索引 ▾</h2>

		<!-- Table of contents for API; must be named manual-nav to turn off auto nav. -->
			<div id="manual-nav">
			<dl>
			
			
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/regexp/#Match">func Match(pattern string, b []byte) (matched bool, err error)</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/regexp/#MatchReader">func MatchReader(pattern string, r io.RuneReader) (matched bool, err error)</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/regexp/#MatchString">func MatchString(pattern string, s string) (matched bool, err error)</a></dd>
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/regexp/#QuoteMeta">func QuoteMeta(s string) string</a></dd>
			
			
				
				<dd><a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">type Regexp</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Compile">func Compile(expr string) (*Regexp, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#CompilePOSIX">func CompilePOSIX(expr string) (*Regexp, error)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#MustCompile">func MustCompile(str string) *Regexp</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#MustCompilePOSIX">func MustCompilePOSIX(str string) *Regexp</a></dd>
				
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.Expand">func (re *Regexp) Expand(dst []byte, template []byte, src []byte, match []int) []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.ExpandString">func (re *Regexp) ExpandString(dst []byte, template string, src string, match []int) []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.Find">func (re *Regexp) Find(b []byte) []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAll">func (re *Regexp) FindAll(b []byte, n int) [][]byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAllIndex">func (re *Regexp) FindAllIndex(b []byte, n int) [][]int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAllString">func (re *Regexp) FindAllString(s string, n int) []string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAllStringIndex">func (re *Regexp) FindAllStringIndex(s string, n int) [][]int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAllStringSubmatch">func (re *Regexp) FindAllStringSubmatch(s string, n int) [][]string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAllStringSubmatchIndex">func (re *Regexp) FindAllStringSubmatchIndex(s string, n int) [][]int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAllSubmatch">func (re *Regexp) FindAllSubmatch(b []byte, n int) [][][]byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindAllSubmatchIndex">func (re *Regexp) FindAllSubmatchIndex(b []byte, n int) [][]int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindIndex">func (re *Regexp) FindIndex(b []byte) (loc []int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindReaderIndex">func (re *Regexp) FindReaderIndex(r io.RuneReader) (loc []int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindReaderSubmatchIndex">func (re *Regexp) FindReaderSubmatchIndex(r io.RuneReader) []int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindString">func (re *Regexp) FindString(s string) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindStringIndex">func (re *Regexp) FindStringIndex(s string) (loc []int)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindStringSubmatch">func (re *Regexp) FindStringSubmatch(s string) []string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindStringSubmatchIndex">func (re *Regexp) FindStringSubmatchIndex(s string) []int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindSubmatch">func (re *Regexp) FindSubmatch(b []byte) [][]byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.FindSubmatchIndex">func (re *Regexp) FindSubmatchIndex(b []byte) []int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.LiteralPrefix">func (re *Regexp) LiteralPrefix() (prefix string, complete bool)</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.Longest">func (re *Regexp) Longest()</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.Match">func (re *Regexp) Match(b []byte) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.MatchReader">func (re *Regexp) MatchReader(r io.RuneReader) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.MatchString">func (re *Regexp) MatchString(s string) bool</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.NumSubexp">func (re *Regexp) NumSubexp() int</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.ReplaceAll">func (re *Regexp) ReplaceAll(src, repl []byte) []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.ReplaceAllFunc">func (re *Regexp) ReplaceAllFunc(src []byte, repl func([]byte) []byte) []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.ReplaceAllLiteral">func (re *Regexp) ReplaceAllLiteral(src, repl []byte) []byte</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.ReplaceAllLiteralString">func (re *Regexp) ReplaceAllLiteralString(src, repl string) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.ReplaceAllString">func (re *Regexp) ReplaceAllString(src, repl string) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.ReplaceAllStringFunc">func (re *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.Split">func (re *Regexp) Split(s string, n int) []string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.String">func (re *Regexp) String() string</a></dd>
				
					
					<dd>&nbsp; &nbsp; <a href="https://golang-china.appspot.com/pkg/regexp/#Regexp.SubexpNames">func (re *Regexp) SubexpNames() []string</a></dd>
				
			
			
			</dl>
			</div><!-- #manual-nav -->

		
		<div id="pkg-examples">
<!--
			<h4>Examples</h4>
-->
			<h4>示例</h4>
			<dl>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_">Package</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_MatchString">MatchString</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_FindAllString">Regexp.FindAllString</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_FindAllStringSubmatch">Regexp.FindAllStringSubmatch</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_FindAllStringSubmatchIndex">Regexp.FindAllStringSubmatchIndex</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_FindString">Regexp.FindString</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_FindStringIndex">Regexp.FindStringIndex</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_FindStringSubmatch">Regexp.FindStringSubmatch</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_ReplaceAllLiteralString">Regexp.ReplaceAllLiteralString</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_ReplaceAllString">Regexp.ReplaceAllString</a></dd>
			
			<dd><a class="exampleLink" href="https://golang-china.appspot.com/pkg/regexp/#example_Regexp_SubexpNames">Regexp.SubexpNames</a></dd>
			
			</dl>
		</div>
		

		
<!--
			<h4>Package files</h4>
-->
			<h4>包文件</h4>
			<p>
			<span style="font-size:90%">
			
				<a href="https://golang-china.appspot.com/src/regexp/backtrack.go">backtrack.go</a>
			
				<a href="https://golang-china.appspot.com/src/regexp/exec.go">exec.go</a>
			
				<a href="https://golang-china.appspot.com/src/regexp/onepass.go">onepass.go</a>
			
				<a href="https://golang-china.appspot.com/src/regexp/regexp.go">regexp.go</a>
			
			</span>
			</p>
		
		</div><!-- .expanded -->
		</div><!-- #pkg-index -->

		<div id="pkg-callgraph" class="toggle" style="display: none">
		<div class="collapsed">
<!--
			<h2 class="toggleButton" title="Click to show Internal Call Graph section">Internal call graph ▹</h2>
-->
			<h2 class="toggleButton" title="点此显示内部调用图">内部调用图 ▹</h2>
		</div> <!-- .expanded -->
		<div class="expanded">
<!--
			<h2 class="toggleButton" title="Click to hide Internal Call Graph section">Internal call graph ▾</h2>
-->
			<h2 class="toggleButton" title="点此隐藏内部调用图">内部调用图 ▾</h2>
<!--
			<p>
			  In the call graph viewer below, each node
			  is a function belonging to this package
			  and its children are the functions it
			  calls&mdash;perhaps dynamically.
			</p>
			<p>
			  The root nodes are the entry points of the
			  package: functions that may be called from
			  outside the package.
			  There may be non-exported or anonymous
			  functions among them if they are called
			  dynamically from another package.
			</p>
			<p>
			  Click a node to visit that function's source code.
			  From there you can visit its callers by
			  clicking its declaring <code>func</code>
			  token.
			</p>
			<p>
			  Functions may be omitted if they were
			  determined to be unreachable in the
			  particular programs or tests that were
			  analyzed.
			</p>
-->
			<p>
			在下面的调用图查看器中，每个节点都是一个属于本包的函数，其子节点即为它所调用的函数——或许是动态的。
			</p>
			<p>
			根节点为包的入口点：函数可从包的外部调用。若这些函数被其它包动态地调用，
			那么它们可能是未导出的或匿名的。
			</p>
			<p>
			点击一个节点来查看该函数的源码。在源码中，可以点击它的 <code>func</code>
			声明标记来查看其调用者。
			</p>
			<p>
			在分析特定程序或测试时，被认定为无法访问的函数会被忽略。
			</p>
			<!-- Zero means show all package entry points. -->
			<ul style="margin-left: 0.5in" id="callgraph-0" class="treeview"></ul>
		</div>
		</div> <!-- #pkg-callgraph -->

		
		
		
			
			
			<h2 id="Match">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=13663:13725#L423">Match</a></h2>
			<pre>func Match(pattern <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) (matched <a href="https://golang-china.appspot.com/pkg/builtin/#bool">bool</a>, err <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a>)</pre>
			<p>
Match检查b中是否存在匹配pattern的子序列。更复杂的用法请使用Compile函数和Regexp对象。
</p>

			
			

		
			
			
			<h2 id="MatchReader">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=12990:13065#L401">MatchReader</a></h2>
			<pre>func MatchReader(pattern <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, r <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#RuneReader">RuneReader</a>) (matched <a href="https://golang-china.appspot.com/pkg/builtin/#bool">bool</a>, err <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a>)</pre>
			<p>
MatchReader类似Match，但匹配对象是io.RuneReader。
</p>

			
			

		
			
			
			<h2 id="MatchString">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=13331:13399#L412">MatchString</a></h2>
			<pre>func MatchString(pattern <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) (matched <a href="https://golang-china.appspot.com/pkg/builtin/#bool">bool</a>, err <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a>)</pre>
			<p>
MatchString类似Match，但匹配对象是字符串。
</p>

			<div id="example_MatchString" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	matched, err := regexp.MatchString("foo.*", "seafood")
	fmt.Println(matched, err)
	matched, err = regexp.MatchString("bar.*", "seafood")
	fmt.Println(matched, err)
	matched, err = regexp.MatchString("a(b", "seafood")
	fmt.Println(matched, err)
}
</textarea></div>
				<div class="output"><pre>true &lt;nil&gt;
false &lt;nil&gt;
false error parsing regexp: missing closing ): `a(b`
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

			

		
			
			
			<h2 id="QuoteMeta">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=18615:18646#L571">QuoteMeta</a></h2>
			<pre>func QuoteMeta(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
			<p>
QuoteMeta返回将s中所有正则表达式元字符都进行转义后字符串。该字符串可以用在正则表达式中匹配字面值s。例如，QuoteMeta(`[foo]`)会返回`\[foo\]`。
</p>

			
			

		
		
			
			
			<h2 id="Regexp">type <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=3278:4027#L72">Regexp</a></h2>
			<pre>type Regexp struct {
        <span class="comment">// contains filtered or unexported fields</span>
}</pre>
			<p>
Regexp代表一个编译好的正则表达式。Regexp可以被多线程安全地同时使用。
</p>


			

			

			
			
			

			
				
				<h3 id="Compile">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=4746:4788#L107">Compile</a></h3>
				<pre>func Compile(expr <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) (*<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>, <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a>)</pre>
				<p>
Compile解析并返回一个正则表达式。如果成功返回，该Regexp就可用于匹配文本。
</p>
<p>
在匹配文本时，该正则表达式会尽可能早的开始匹配，并且在匹配过程中选择回溯搜索到的第一个匹配结果。这种模式被称为“leftmost-first”，Perl、Python和其他实现都采用了这种模式，但本包的实现没有回溯的损耗。对POSIX的“leftmost-longest”模式，参见CompilePOSIX。
</p>

				
				
			
				
				<h3 id="CompilePOSIX">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=5907:5954#L130">CompilePOSIX</a></h3>
				<pre>func CompilePOSIX(expr <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) (*<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>, <a href="https://golang-china.appspot.com/pkg/builtin/#error">error</a>)</pre>
				<p>
类似Compile但会将语法约束到POSIX
ERE（egrep）语法，并将匹配模式设置为leftmost-longest。
</p>
<p>
在匹配文本时，该正则表达式会尽可能早的开始匹配，并且在匹配过程中选择搜索到的最长的匹配结果。这种模式被称为“leftmost-longest”，POSIX采用了这种模式（早期正则的DFA自动机模式）。
</p>
<p>
然而，可能会有多个“leftmost-longest”匹配，每个都有不同的组匹配状态，本包在这里和POSIX不同。在所有可能的“leftmost-longest”匹配里，本包选择回溯搜索时第一个找到的，而POSIX会选择候选结果中第一个组匹配最长的（可能有多个），然后再从中选出第二个组匹配最长的，依次类推。POSIX规则计算困难，甚至没有良好定义。
</p>
<p>
参见http://swtch.com/~rsc/regexp/regexp2.html#posix获取细节。
</p>

				
				
			
				
				<h3 id="MustCompile">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=8149:8185#L208">MustCompile</a></h3>
				<pre>func MustCompile(str <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a></pre>
				<p>
MustCompile类似Compile但会在解析失败时panic，主要用于全局正则表达式变量的安全初始化。
</p>

				
				
			
				
				<h3 id="MustCompilePOSIX">func <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=8510:8551#L219">MustCompilePOSIX</a></h3>
				<pre>func MustCompilePOSIX(str <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a></pre>
				<p>
MustCompilePOSIX类似CompilePOSIX但会在解析失败时panic，主要用于全局正则表达式变量的安全初始化。
</p>

				
				
			

			
				
				<h3 id="Regexp.Expand">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=23787:23872#L747">Expand</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) Expand(dst []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, template []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, src []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, match []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
Expand appends template to dst and returns the result; during the append, Expand
replaces variables in the template with corresponding matches drawn from src.
The match slice should have been returned by FindSubmatchIndex.
</p>
<p>
In the template, a variable is denoted by a substring of the form $name or
${name}, where name is a non-empty sequence of letters, digits, and underscores.
A purely numeric name like $1 refers to the submatch with the corresponding
index; other names refer to capturing parentheses named with the (?P&lt;name&gt;...)
syntax. A reference to an out of range or unmatched index or a name that is not
present in the regular expression is replaced with an empty slice.
</p>
<p>
In the $name form, name is taken to be as long as possible: $1x is equivalent to
${1x}, not ${1}x, and, $10 is equivalent to ${10}, not ${1}0.
</p>
<p>
To insert a literal $ in the output, use $$ in the template.
</p>

				
				
				
			
				
				<h3 id="Regexp.ExpandString">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=24111:24202#L754">ExpandString</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) ExpandString(dst []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, template <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, src <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, match []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
ExpandString is like Expand but the template and source are strings. It appends
to and returns a byte slice in order to give the calling code control over
allocation.
</p>

				
				
				
			
				
				<h3 id="Regexp.Find">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=20471:20510#L653">Find</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) Find(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
Find returns a slice holding the text of the leftmost match in b of the regular
expression. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindAll">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=28616:28667#L910">FindAll</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAll(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) [][]<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
FindAll is the 'All' version of Find; it returns a slice of all successive
matches of the expression, as defined by the 'All' description in the package
comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindAllIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=29122:29177#L928">FindAllIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAllIndex(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) [][]<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
FindAllIndex is the 'All' version of FindIndex; it returns a slice of all
successive matches of the expression, as defined by the 'All' description in the
package comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindAllString">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=29623:29680#L946">FindAllString</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAllString(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
FindAllString is the 'All' version of FindString; it returns a slice of all
successive matches of the expression, as defined by the 'All' description in the
package comment. A return value of nil indicates no match.
</p>

				
				<div id="example_Regexp_FindAllString" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("a.")
	fmt.Println(re.FindAllString("paranormal", -1))
	fmt.Println(re.FindAllString("paranormal", 2))
	fmt.Println(re.FindAllString("graal", -1))
	fmt.Println(re.FindAllString("none", -1))
}
</textarea></div>
				<div class="output"><pre>[ar an al]
[ar an]
[aa]
[]
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.FindAllStringIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=30148:30209#L964">FindAllStringIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAllStringIndex(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) [][]<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
FindAllStringIndex is the 'All' version of FindStringIndex; it returns a slice
of all successive matches of the expression, as defined by the 'All' description
in the package comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindAllStringSubmatch">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=31839:31906#L1024">FindAllStringSubmatch</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAllStringSubmatch(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) [][]<a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
FindAllStringSubmatch is the 'All' version of FindStringSubmatch; it returns a
slice of all successive matches of the expression, as defined by the 'All'
description in the package comment. A return value of nil indicates no match.
</p>

				
				<div id="example_Regexp_FindAllStringSubmatch" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("a(x*)b")
	fmt.Printf("%q\n", re.FindAllStringSubmatch("-ab-", -1))
	fmt.Printf("%q\n", re.FindAllStringSubmatch("-axxb-", -1))
	fmt.Printf("%q\n", re.FindAllStringSubmatch("-ab-axb-", -1))
	fmt.Printf("%q\n", re.FindAllStringSubmatch("-axxb-ab-", -1))
}
</textarea></div>
				<div class="output"><pre>[["ab" ""]]
[["axxb" "xx"]]
[["ab" ""] ["axb" "x"]]
[["axxb" "xx"] ["ab" ""]]
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.FindAllStringSubmatchIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=32520:32589#L1049">FindAllStringSubmatchIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAllStringSubmatchIndex(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) [][]<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
FindAllStringSubmatchIndex is the 'All' version of FindStringSubmatchIndex; it
returns a slice of all successive matches of the expression, as defined by the
'All' description in the package comment. A return value of nil indicates no
match.
</p>

				
				<div id="example_Regexp_FindAllStringSubmatchIndex" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("a(x*)b")
	// Indices:
	//    01234567   012345678
	//    -ab-axb-   -axxb-ab-
	fmt.Println(re.FindAllStringSubmatchIndex("-ab-", -1))
	fmt.Println(re.FindAllStringSubmatchIndex("-axxb-", -1))
	fmt.Println(re.FindAllStringSubmatchIndex("-ab-axb-", -1))
	fmt.Println(re.FindAllStringSubmatchIndex("-axxb-ab-", -1))
	fmt.Println(re.FindAllStringSubmatchIndex("-foo-", -1))
}
</textarea></div>
				<div class="output"><pre>[[1 3 2 2]]
[[1 5 2 4]]
[[1 3 2 2] [4 7 5 6]]
[[1 5 2 4] [6 8 7 7]]
[]
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.FindAllSubmatch">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=30660:30721#L982">FindAllSubmatch</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAllSubmatch(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) [][][]<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
FindAllSubmatch is the 'All' version of FindSubmatch; it returns a slice of all
successive matches of the expression, as defined by the 'All' description in the
package comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindAllSubmatchIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=31319:31382#L1006">FindAllSubmatchIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindAllSubmatchIndex(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) [][]<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
FindAllSubmatchIndex is the 'All' version of FindSubmatchIndex; it returns a
slice of all successive matches of the expression, as defined by the 'All'
description in the package comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=20827:20876#L665">FindIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindIndex(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) (loc []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>)</pre>
				<p>
FindIndex returns a two-element slice of integers defining the location of the
leftmost match in b of the regular expression. The match itself is at
b[loc[0]:loc[1]]. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindReaderIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=22135:22197#L703">FindReaderIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindReaderIndex(r <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#RuneReader">RuneReader</a>) (loc []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>)</pre>
				<p>
FindReaderIndex returns a two-element slice of integers defining the location of
the leftmost match of the regular expression in text read from the RuneReader.
The match text was found in the input stream at byte offset loc[0] through
loc[1]-1. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindReaderSubmatchIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=28187:28251#L900">FindReaderSubmatchIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindReaderSubmatchIndex(r <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#RuneReader">RuneReader</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
FindReaderSubmatchIndex returns a slice holding the index pairs identifying the
leftmost match of the regular expression of text read by the RuneReader, and the
matches, if any, of its subexpressions, as defined by the 'Submatch' and 'Index'
descriptions in the package comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindString">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=21319:21364#L678">FindString</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindString(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
FindString returns a string holding the text of the leftmost match in s of the
regular expression. If there is no match, the return value is an empty string,
but it will also be empty if the regular expression successfully matches an
empty string. Use FindStringIndex or FindStringSubmatch if it is necessary to
distinguish these cases.
</p>

				
				<div id="example_Regexp_FindString" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("fo.?")
	fmt.Printf("%q\n", re.FindString("seafood"))
	fmt.Printf("%q\n", re.FindString("meat"))
}
</textarea></div>
				<div class="output"><pre>"foo"
""
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.FindStringIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=21687:21742#L690">FindStringIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindStringIndex(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) (loc []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>)</pre>
				<p>
FindStringIndex returns a two-element slice of integers defining the location of
the leftmost match in s of the regular expression. The match itself is at
s[loc[0]:loc[1]]. A return value of nil indicates no match.
</p>

				
				<div id="example_Regexp_FindStringIndex" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("ab?")
	fmt.Println(re.FindStringIndex("tablett"))
	fmt.Println(re.FindStringIndex("foo") == nil)
}
</textarea></div>
				<div class="output"><pre>[1 3]
true
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.FindStringSubmatch">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=27128:27183#L872">FindStringSubmatch</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindStringSubmatch(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
FindStringSubmatch returns a slice of strings holding the text of the leftmost
match of the regular expression in s and the matches, if any, of its
subexpressions, as defined by the 'Submatch' description in the package comment.
A return value of nil indicates no match.
</p>

				
				<div id="example_Regexp_FindStringSubmatch" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("a(x*)b(y|z)c")
	fmt.Printf("%q\n", re.FindStringSubmatch("-axxxbyc-"))
	fmt.Printf("%q\n", re.FindStringSubmatch("-abzc-"))
}
</textarea></div>
				<div class="output"><pre>["axxxbyc" "xxx" "y"]
["abzc" "" "z"]
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.FindStringSubmatchIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=27726:27783#L891">FindStringSubmatchIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindStringSubmatchIndex(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
FindStringSubmatchIndex returns a slice holding the index pairs identifying the
leftmost match of the regular expression in s and the matches, if any, of its
subexpressions, as defined by the 'Submatch' and 'Index' descriptions in the
package comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindSubmatch">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=22566:22615#L716">FindSubmatch</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindSubmatch(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) [][]<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
FindSubmatch returns a slice of slices holding the text of the leftmost match of
the regular expression in b and the matches, if any, of its subexpressions, as
defined by the 'Submatch' descriptions in the package comment. A return value of
nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.FindSubmatchIndex">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=26725:26776#L863">FindSubmatchIndex</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) FindSubmatchIndex(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
FindSubmatchIndex returns a slice holding the index pairs identifying the
leftmost match of the regular expression in b and the matches, if any, of its
subexpressions, as defined by the 'Submatch' and 'Index' descriptions in the
package comment. A return value of nil indicates no match.
</p>

				
				
				
			
				
				<h3 id="Regexp.LiteralPrefix">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=12198:12262#L378">LiteralPrefix</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) LiteralPrefix() (prefix <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, complete <a href="https://golang-china.appspot.com/pkg/builtin/#bool">bool</a>)</pre>
				<p>
LiteralPrefix返回一个字符串字面值prefix，任何匹配本正则表达式的字符串都会以prefix起始。
如果该字符串字面值包含整个正则表达式，返回值complete会设为真。
</p>

				
				
				
			
				
				<h3 id="Regexp.Longest">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=6265:6292#L138">Longest</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) Longest()</pre>
				<p>
Longest makes future searches prefer the leftmost-longest match. That is, when
matching against text, the regexp returns a match that begins as early as
possible in the input (leftmost), and among those it chooses a match that is as
long as possible.
</p>

				
				
				
			
				
				<h3 id="Regexp.Match">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=12717:12755#L394">Match</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) Match(b []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#bool">bool</a></pre>
				<p>
Match reports whether the Regexp matches the byte slice b.
</p>

				
				
				
			
				
				<h3 id="Regexp.MatchReader">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=12391:12442#L384">MatchReader</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) MatchReader(r <a href="https://golang-china.appspot.com/pkg/io/">io</a>.<a href="https://golang-china.appspot.com/pkg/io/#RuneReader">RuneReader</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#bool">bool</a></pre>
				<p>
MatchReader reports whether the Regexp matches the text read by the RuneReader.
</p>

				
				
				
			
				
				<h3 id="Regexp.MatchString">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=12558:12602#L389">MatchString</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) MatchString(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#bool">bool</a></pre>
				<p>
MatchString reports whether the Regexp matches the string s.
</p>

				
				
				
			
				
				<h3 id="Regexp.NumSubexp">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=8894:8927#L235">NumSubexp</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) NumSubexp() <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a></pre>
				<p>
NumSubexp返回该正则表达式中捕获分组的数量。
</p>

				
				
				
			
				
				<h3 id="Regexp.ReplaceAll">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=17090:17143#L528">ReplaceAll</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) ReplaceAll(src, repl []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
ReplaceAll returns a copy of src, replacing matches of the Regexp with the
replacement text repl. Inside repl, $ signs are interpreted as in Expand, so for
instance $1 represents the text of the first submatch.
</p>

				
				
				
			
				
				<h3 id="Regexp.ReplaceAllFunc">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=18044:18121#L556">ReplaceAllFunc</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) ReplaceAllFunc(src []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>, repl func([]<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
ReplaceAllFunc returns a copy of src in which all matches of the Regexp have
been replaced by the return value of function repl applied to the matched byte
slice. The replacement returned by repl is substituted directly, without using
Expand.
</p>

				
				
				
			
				
				<h3 id="Regexp.ReplaceAllLiteral">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=17615:17675#L546">ReplaceAllLiteral</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) ReplaceAllLiteral(src, repl []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#byte">byte</a></pre>
				<p>
ReplaceAllLiteral returns a copy of src, replacing matches of the Regexp with
the replacement bytes repl. The replacement repl is substituted directly,
without using Expand.
</p>

				
				
				
			
				
				<h3 id="Regexp.ReplaceAllLiteralString">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=14527:14593#L448">ReplaceAllLiteralString</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) ReplaceAllLiteralString(src, repl <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
ReplaceAllLiteralString returns a copy of src, replacing matches of the Regexp
with the replacement string repl. The replacement repl is substituted directly,
without using Expand.
</p>

				
				<div id="example_Regexp_ReplaceAllLiteralString" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("a(x*)b")
	fmt.Println(re.ReplaceAllLiteralString("-ab-axxb-", "T"))
	fmt.Println(re.ReplaceAllLiteralString("-ab-axxb-", "$1"))
	fmt.Println(re.ReplaceAllLiteralString("-ab-axxb-", "${1}"))
}
</textarea></div>
				<div class="output"><pre>-T-T-
-$1-$1-
-${1}-${1}-
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.ReplaceAllString">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=14054:14113#L434">ReplaceAllString</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) ReplaceAllString(src, repl <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
ReplaceAllString returns a copy of src, replacing matches of the Regexp with the
replacement string repl. Inside repl, $ signs are interpreted as in Expand, so
for instance $1 represents the text of the first submatch.
</p>

				
				<div id="example_Regexp_ReplaceAllString" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("a(x*)b")
	fmt.Println(re.ReplaceAllString("-ab-axxb-", "T"))
	fmt.Println(re.ReplaceAllString("-ab-axxb-", "$1"))
	fmt.Println(re.ReplaceAllString("-ab-axxb-", "$1W"))
	fmt.Println(re.ReplaceAllString("-ab-axxb-", "${1}W"))
}
</textarea></div>
				<div class="output"><pre>-T-T-
--xx-
---
-W-xxW-
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
				
				<h3 id="Regexp.ReplaceAllStringFunc">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=14976:15059#L458">ReplaceAllStringFunc</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) ReplaceAllStringFunc(src <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, repl func(<a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>) <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
ReplaceAllStringFunc returns a copy of src in which all matches of the Regexp
have been replaced by the return value of function repl applied to the matched
substring. The replacement returned by repl is substituted directly, without
using Expand.
</p>

				
				
				
			
				
				<h3 id="Regexp.Split">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=33516:33565#L1078">Split</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) Split(s <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a>, n <a href="https://golang-china.appspot.com/pkg/builtin/#int">int</a>) []<a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
Split slices s into substrings separated by the expression and returns a slice
of the substrings between those expression matches.
</p>
<p>
The slice returned by this method consists of all the substrings of s not
contained in the slice returned by FindAllString. When called on an expression
that contains no metacharacters, it is equivalent to strings.SplitN.
</p>
<p>
Example:
</p>
<pre>s := regexp.MustCompile("a*").Split("abaabaccadaaae", 5)
// s: ["", "b", "b", "c", "cadaaae"]
</pre>
<p>
The count determines the number of substrings to return:
</p>
<pre>n &gt; 0: at most n substrings; the last substring will be the unsplit remainder.
n == 0: the result is nil (zero substrings)
n &lt; 0: all substrings
</pre>

				
				
				
			
				
				<h3 id="Regexp.String">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=4103:4136#L93">String</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) String() <a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
String返回用于编译成正则表达式的字符串。
</p>

				
				
				
			
				
				<h3 id="Regexp.SubexpNames">func (*Regexp) <a href="https://golang-china.appspot.com/src/regexp/regexp.go?s=9290:9330#L244">SubexpNames</a></h3>
				<pre>func (re *<a href="https://golang-china.appspot.com/pkg/regexp/#Regexp">Regexp</a>) SubexpNames() []<a href="https://golang-china.appspot.com/pkg/builtin/#string">string</a></pre>
				<p>
SubexpNames返回该正则表达式中捕获分组的名字。第一个分组的名字是names[1]，因此，如果m是一个组匹配切片，m[i]的名字是SubexpNames()[i]。因为整个正则表达式是无法被命名的，names[0]必然是空字符串。该切片不应被修改。
</p>

				
				<div id="example_Regexp_SubexpNames" class="toggle">
	<div class="collapsed">
<!--
		<p class="exampleHeading toggleButton">▹ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▹ <span class="text">示例</span></p>
	</div>
	<div class="expanded">
<!--
		<p class="exampleHeading toggleButton">▾ <span class="text">Example</span></p>
-->
		<p class="exampleHeading toggleButton">▾ <span class="text">示例</span></p>
		
		
		
			<div class="play">
				<div class="input"><textarea class="code">package main

import (
	"fmt"
	"regexp"
)

func main() {
	re := regexp.MustCompile("(?P&lt;first&gt;[a-zA-Z]+) (?P&lt;last&gt;[a-zA-Z]+)")
	fmt.Println(re.MatchString("Alan Turing"))
	fmt.Printf("%q\n", re.SubexpNames())
	reversed := fmt.Sprintf("${%s} ${%s}", re.SubexpNames()[2], re.SubexpNames()[1])
	fmt.Println(reversed)
	fmt.Println(re.ReplaceAllString("Alan Turing", reversed))
}
</textarea></div>
				<div class="output"><pre>true
["" "first" "last"]
${last} ${first}
Turing Alan
</pre></div>
				<div class="buttons">
<!--
					<a class="run" title="Run this code [shift-enter]">Run</a>
					<a class="fmt" title="Format this code">Format</a>
					<a class="share" title="Share this code">Share</a>
-->
					<a class="run" title="运行此代码[Shift+Enter]">运行</a>
					<a class="fmt" title="格式化此代码">格式化</a>
					<a class="share" title="分享此代码">分享</a>
				</div>
			</div>
		
	</div>
</div>

				
			
		
	

	





	
	
<!--
		<h2 id="pkg-subdirectories">Subdirectories</h2>
-->
	
		<h2 id="pkg-subdirectories">子目录</h2>
	
	<table class="dir">
	<tbody><tr>
<!--
	<th>Name</th>
-->
	<th>名称</th>
	<th>&nbsp;&nbsp;&nbsp;&nbsp;</th>
<!--
	<th style="text-align: left; width: auto">Synopsis</th>
-->
	<th style="text-align: left; width: auto">摘要</th>
	</tr>
	
		<tr>
		<td><a href="https://golang-china.appspot.com/pkg/">..</a></td>
		</tr>
	
	
		
			<tr>
			<td class="name"><a href="https://golang-china.appspot.com/pkg/regexp/syntax/">syntax</a></td>
			<td>&nbsp;&nbsp;&nbsp;&nbsp;</td>
			<td style="width: auto">Package syntax parses regular expressions into parse trees and compiles parse trees into programs.</td>
			</tr>
		
	
	</tbody></table>

	



<!--
<div id="footer">
Build version go1.4.2 (appengine-1.9.21).<br>
Except as <a href="https://developers.google.com/site-policies#restrictions">noted</a>,
the content of this page is licensed under the
Creative Commons Attribution 3.0 License,
and code is licensed under a <a href="/LICENSE">BSD license</a>.<br>
<a href="/doc/tos.html">Terms of Service</a> |
<a href="http://www.google.com/intl/en/policies/privacy/">Privacy Policy</a>
</div>
-->
<div id="footer">
构建版本 go1.4.2 (appengine-1.9.21).<br>
除<a href="https://developers.google.com/site-policies#restrictions">特别注明</a>外，
本页内容均采用知识共享-署名（CC-BY）3.0协议授权，代码采用<a href="https://golang-china.appspot.com/LICENSE">BSD协议</a>授权。<br>
<a href="https://golang-china.appspot.com/doc/tos.html">服务条款</a> |
<a href="http://www.google.com/intl/en/policies/privacy/">隐私政策</a>
</div>

</div><!-- .container -->
</div><!-- #page -->

<!-- TODO(adonovan): load these from <head> using "defer" attribute? -->
<script type="text/javascript" src="./regexp - Go 编程语言_files/jquery.js"></script>
<script type="text/javascript" src="./regexp - Go 编程语言_files/jquery.treeview.js"></script>
<script type="text/javascript" src="./regexp - Go 编程语言_files/jquery.treeview.edit.js"></script>


<script type="text/javascript" src="./regexp - Go 编程语言_files/playground.js"></script>

<script type="text/javascript" src="./regexp - Go 编程语言_files/godocs.js"></script>



</body></html>